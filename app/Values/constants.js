const { baseUrl, usersPort, apiVersion, financialPort, travelPort, deliveryPort } = require("../../config/env")
module.exports = {
  TRAVEL_TYPE: {
    PASSENGER_REQUESTED: "PASSENGER_REQUESTED",
    AGENT_REQUESTED: "AGENT_REQUESTED",
    TAXIMETER: "TAXIMETER",
    INSTANCE: "INSTANCE",
    ARCHIVE: "ARCHIVE",
    DELIVERY: "DELIVERY",
  },
  AGENT_TYPE: {
    AGENCY: "AGENCY",
    DELIVERY: "DELIVERY",
    VIP: "VIP",
    WOMEN: "WOMEN",
    TAXI_BISIM: "TAXI_BISIM",
  },
  EVENTS: {
    SET_DRIVER: "setDriver",
    ACCEPT_ADDITION: "acceptAddition",
    REJECT_ADDITION: "rejectAddition",
    UNSET_DRIVER: "unsetDriver",
    UPDATE_DRIVER_LOCATION: "updateDriverLocation",
    ACCEPT_TRAVEL: "acceptTravel",
    ACCEPT_DELIVERY: "acceptDelivery",
    DRIVER_ARRIVED: "driverArrived",
    DRIVER_ARRIVED_DELIVERY: "deliveryDriverArrived",
    PASSENGER_BOARDED: "passengerBoarded",
    BOX_ACHIEVEDY: "boxAchieved",
    FRIST_DESTINATION_FINISH: "fristDestinationFinish",
    CANCEL_TRAVEL_DRIVER: "cancelTravelDriver",
    FINISH_TRAVEL: "finishTravel",
    FINISH_DELIVERY: "finishDelivery",
    GET_CLOSE_DRIVERS: "getCloseDrivers",
    GET_DRIVER_LOCATION: "getDriverLocation",
    GET_MY_ONLINE_DRIVERS: "getMyOnlineDrivers",
    GET_MY_CLOSE_DRIVERS: "getMyCloseDrivers",
    GET_MY_AVAILABLE_DRIVERS: "getMyAvailableDrivers",
    REQUEST_MY_DRIVERS: "requestMyDrivers",
    GET_PASSENGERS: "getPassengers",
    GET_CLIENTS: "getClients",
    TAXI_METER_START: "taximeterStart",
    SET_AGENT: "setAgent",
    SET_PASSENGER: "setPassenger",
    CREATE_TRAVEL: "createTravel",
    CREATE_DELIVERY: "createDelivery",
    RE_FIND_DRIVERS: "reFindDrivers",
    RE_FIND_DRIVERS_DELIVERY: "reFindDriversDelivery",
    RE_CREATE_TRAVEL: "reCreateTravel",
    CHOOSE_AGENT: "chooseAgent",
    CANCEL_DELIVERY_DRIVER: "cancelDeliveryDriver",
    CHOOSE_AGENT_FOR_DELIVERY: "chooseAgentForDelivery",
    CREATE_INSTANCE_TRAVEL: "createInstanceTravel",
    CANCEL_TRAVEL_PASSENGER: "cancelTravelPassenger",
    CANCEL_DELIVERY_PASSENGER: "cancelDeliveryPassenger",
    ADD_OPTIONS: "addOptions",
    DISCONNECT: "disconnect",
    ERROR: "error",
    CONNECTION: "connection",
  },
  TRAVEL_STATUS: {
    REACHING_TO_PASSENGER: "REACHING_TO_PASSENGER",
    PASSENGER_REQUESTED: "PASSENGER_REQUESTED",
    REQUESTED: "REQUESTED",
    AGENT_REQUESTED: "AGENT_REQUESTED",
    ACCEPTED: "ACCEPTED",
    ARRIVED: "ARRIVED",
    STARTED: "STARTED",
    FINISHED: "FINISHED",
    PASSENGER_CANCELED: "PASSENGER_CANCELED",
    AGENT_CANCELED: "AGENT_CANCELED",
    DRIVER_CANCELED: "DRIVER_CANCELED",
  },
  IN_TRIP_STATES: ["REQUESTED", "ACCEPTED", "ARRIVED", "STARTED"],
  USER_TYPES: {
    ADMIN: "ADMIN",
    AGENT: "AGENT",
    SUPER_AGENT: "SUPER_AGENT",
    PASSENGER: "PASSENGER",
    DRIVER: "DRIVER",
    DELIVERY: "DELIVERY",
  },
  USER_STATUS: {
    NO_SERVICE: "NO_SERVICE",
    IN_SERVICE: "IN_SERVICE",
  },
  RESPONSE_STATUS: {
    OK: "OK",
    FAILED: "FAILED",
    PARAM_ERROR: "PARAM_ERROR",
  },
  URLS: {
    UPDATE_DRIVER_STATUS: `${baseUrl}:${usersPort}/api/${apiVersion}/driver/status`,
    UPDATE_PASSENGER_CITY: `${baseUrl}:${usersPort}/api/${apiVersion}/user/update-passenger-city`,
    UPDATE_PASSENGER_STATUS: `${baseUrl}:${usersPort}/api/${apiVersion}/passenger/status`,
    GET_USER_PROFILE: `${baseUrl}:${usersPort}/api/${apiVersion}/archivist/user-by-token-for-socket`,
    ACCEPT_TRAVEL: `${baseUrl}:${travelPort}/api/${apiVersion}/travel/accept`,
    TRAVEL_URL: `${baseUrl}:${travelPort}/api/${apiVersion}/travel`,
    TRAVEL_BY_ID: `${baseUrl}:${travelPort}/api/${apiVersion}/travel/by-id`,
    RECENT_TRAVEL: `${baseUrl}:${travelPort}/api/${apiVersion}/travel/recent`,
    CANCEL_TRAVEL: `${baseUrl}:${travelPort}/api/${apiVersion}/travel/cancel`,
    CREATE_PASSENGER: `${baseUrl}:${usersPort}/api/${apiVersion}/passenger/create-by-driver-or-operator`,
    FINISH_TRAVELS: `${baseUrl}:${travelPort}/api/${apiVersion}/travel/finish`,
    CALCULATE_PRICE: `${baseUrl}:${financialPort}/api/${apiVersion}/financial/calculate-price`,
    USER_BY_ID: `${baseUrl}:${usersPort}/api/${apiVersion}/archivist/user-by-id`,
    UPDATE_INSTALL_APP_FLAG: `${baseUrl}:${usersPort}/api/${apiVersion}/driver/driver-register-in-app`,
    CHECK_WALLET: `${baseUrl}:${usersPort}/api/${apiVersion}/accountant/check-wallet-for-last-travel`,
    CREATE_DELIVERY: `${baseUrl}:${deliveryPort}/api/${apiVersion}/delivery/create`,
    FIND_DELIVERY_BY_ID: `${baseUrl}:${deliveryPort}/api/${apiVersion}/delivery/by-id?deliveryId=`,
    ACCEPT_DELIVERY: `${baseUrl}:${deliveryPort}/api/${apiVersion}/delivery/accept`,
    DELIVERY_URL: `${baseUrl}:${deliveryPort}/api/${apiVersion}/delivery`,
    DELIVERY_UPDATE_LOG_URL: `${baseUrl}:${deliveryPort}/api/${apiVersion}/delivery/update-log`,
    FINISH_DELIVERY: `${baseUrl}:${deliveryPort}/api/${apiVersion}/delivery/finish`,
    LAST_DELIVERY_PASSENGER: `${baseUrl}:${deliveryPort}/api/${apiVersion}/delivery/last-delivery-for-passenger`,
    CANCEL_DELIVERY: `${baseUrl}:${deliveryPort}/api/${apiVersion}/delivery/cancel`,
    UPDATE_TO_IS_CHOOSE: `${baseUrl}:${deliveryPort}/api/${apiVersion}/delivery/update-is-choose`,
  },
  STATUS_CODES: {
    PV_MSG_DRIVER_ACCEPTED: 1001,
    PV_MSG_DRIVER_ARRIVED: 1002,
    USER_IS_IN_SERVICE: 1003,
    PV_MSG_TRAVEL_STARTED: 1004,
    PV_MSG_DRIVER_REJECTED: 1005,
    PV_MSG_ADDITIONAL_REQUEST: 1006,
    PV_MSG_TRAVEL_FINISHED: 1007,
    PV_MSG_DRIVER_CANCELED: 1008,
    PV_MSG_WALLET_SUFFICENT: 1009,
    PV_MSG_FRIST_DESTINATION_FINISH: 1010,
    PV_MSG_ADDITION_ACCEPTED: 1011,
    PV_MSG_PASSENGER_CHOOSE_AGENT: 1012,
    PV_MSG_PASSENGER_CANCELED: 1013,

    SUCCESSFUL_RESPONSE: 2001,
    ERROR_PARAM: 4001,
    ERROR_PROCESS_FAILED: 5001,
    ERROR_NOT_IN_AREA: 5002,
    ERROR_TRAVEL_NOT_FINISHED: 5003,
  },
  TARGET_ALL: "ALL",
  NESHAN_API_KEY: "service.wF0qrlzXzYAAdhI9EzVXwC4zq95LqMGrUQnf0JmE",
  GOOGLE_API_KEY: "AIzaSyBdh9emBxjJw0XB7Ty2lb8ZWNlaHQ6aQKE",
}
